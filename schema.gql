scalar Date
scalar Upload
scalar JSON

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum Roles {
  ADMIN
  MANAGER
  CLIENT
}

enum StripePaymentStatus {
  REQUIRES_PAYMENT_METHOD  
  REQUIRES_CONFIRMATION  
  PROCESSING  
  SUCCEEDED  
  FAILED  
  CANCELED  
}

enum ShipmentStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  RETURNED
  CANCELED
}

enum NotificationType {
  ORDER_STATUS_UPDATE
  LOW_STOCK_ALERT
  GENERAL
}

# Inputs

# Auth
input RegisterUserInput {
  name: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input ForgetPasswordInput {
  email: String!
}

input ResetPasswordInput {
  reset_token: ID!
  new_password: String!
}

input UpdateInfoUserInput {
  name: String
  password: String
}

# Categories
input CreateCategoryInput {
  name: String!
  parent_id: ID!
  description: String!
}

input UpdateCategoryInput {
  name: String
  parent_id: ID
  description: String
}

# Products
input CreateProductInput {
  name: String!
  description: String!
  price: Float!
  stock: Int!
  category_id: ID!
}

input UpdateProductInput {
  name: String
  description: String
  price: Float!
  stock: Int!
  category_id: ID
}

input UploadImagesInput {
  productId: ID!
  images: [Upload!]!
}

# Likes
input ModifyLikeInput {
  like_status: Boolean
}

# Carts
input AddItemToCartInput {
  product_id: ID!
  quantity: Int!
}

# Orders
input CreateOrderInput {
  cart_id: ID!
}

input UpdateOrderStatusInput {
  payment_status: String!
}

type DeletionResult {
  success: Boolean!
  message: String
}


# Types

type Users {
  id: ID!
  name: String!
  email: String!
  role: Roles!
  created_at: Date!
  updated_at: Date!
  stripe_customer_id: ID!

  notifications: [Notifications]!
  likes: [Likes]!
  orders: [Orders]!
  carts: [Carts]!
}     

type Categories {
  id: ID!
  name: String!
  parent_id: ID!
  description: String!
  created_at: Date!
  updated_at: Date!

  category: Categories
}

type Products {
  id: ID!
  name: String!
  description: String!
  price: Float!
  stock: Int!
  is_disabled: Boolean!
  low_stock_notified: Boolean!
  created_at: Date!
  updated_at: Date!
  category_id: ID!

  images: [ProductImages]!
  category: Categories!
}

type ProductImages {
  id: ID!
  url: String!
  product_id: ID!
}

type Likes {
  id: ID!
  product_id: ID!
  user_id: ID!
  created_at: Date!

  user: Users!
  product: Products!
}

type CartItems {
  id: ID!
  product_id: ID!
  cart_id: ID!
  quantity: ID!

  product: Products!
}

type Carts {
  id: ID!
  user_id: ID!
  cart_items: [CartItems]!
}

type Orders {
  id: ID!
  user_id: ID!
  order_status: OrderStatus!
  total: Float
  payment_id: ID!
  created_at: Date!
  updated_at: Date!

  items: [OrderItems]!
}

type OrderItems {
  id: ID!
  product_id: ID!
  quantity: Int!
  product: Products!
}

type Notifications {
  id: ID!
  user_id: ID!
  type: NotificationType!
  message: String!
  is_read: Boolean!
  created_at: Date!
}

type PaymentIntent {
  id: ID!
  order_id: ID!
  stripe_customer_id: ID!
  stripe_payment_id: ID!
  stripe_client_secret: ID!
  stripe_status: StripePaymentStatus!
  stripe_amount: Float!
  stripe_currency: String!
  stripe_payment_method: String!
  created_at: Date
  updated_at: Date
}

type StripeWebhookEvent {
  id: ID!
  object: String!
  api_version: String
  created: Int!
  data: StripeWebhookEventData!
  livemode: Boolean!
  pending_webhooks: Int!
  request: StripeWebhookRequest
  type: String!
}

type StripeWebhookEventData {
  object: SetupIntent!
}

type StripeWebhookRequest {
  id: String
  idempotency_key: String
}

# Stripe payments

type SetupIntent {
  id: ID!
  object: String!
  application: String
  automatic_payment_methods: String
  cancellation_reason: String
  client_secret: String
  created: Int!
  customer: String
  description: String
  flow_directions: String
  last_setup_error: String
  latest_attempt: String
  livemode: Boolean!
  mandate: String
  metadata: JSON
  next_action: String
  on_behalf_of: String
  payment_method: String
  payment_method_options: PaymentMethodOptions
  payment_method_types: [String!]!
  single_use_mandate: String
  status: String!
  usage: String
}

type PaymentMethodOptions {
  acss_debit: ACSSDebitOptions
}

type ACSSDebitOptions {
  currency: String
  mandate_options: ACSSDebitMandateOptions
  verification_method: String
}

type ACSSDebitMandateOptions {
  interval_description: String
  payment_schedule: String
  transaction_type: String
}

# Pagination

type ItemConnection {
  edges: [ItemEdge]
  pageInfo: PageInfo
}

type ItemEdge {
  node: Products
  cursor: String
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

# Queries
type Query {
  getCategories: [Categories]!
  getCategory(id: ID!): Categories!

  getProducts: [Products]!
  getProduct(id: ID!): Products!
  searchProducts(name: String!, first: Int!, after: String!): ItemConnection

  getUsers: [Users]!
  getUser(id: ID!): Users!

  getCart: Carts!

  getNotifications: Notifications!

  getLikedProducts: [Likes]!

  getOrders: [Orders]!
  getOrderStatus(id: ID!): Orders!
}

# Mutatations
type Mutation {
  registerUser(input: RegisterUserInput!): Users!
  loginUser(input: LoginUserInput!): String!
  forgetPassword(input: ForgetPasswordInput!): String!
  resetPassword(input: ResetPasswordInput!): String!
  updateUserInfo(input: UpdateInfoUserInput!): Users!

  createCategory(input: CreateCategoryInput!): Categories!
  updateCategory(id: ID!, input: UpdateCategoryInput!): Categories!
  deleteCategory(id: ID!): DeletionResult!

  createProduct(input: CreateProductInput!): Products!
  updateProduct(id: ID!, input: UpdateProductInput!): Products!
  deleteProduct(id: ID!): DeletionResult!

  uploadProductImages(input: UploadImagesInput!): [ProductImages]!

  addItemToCart(input: AddItemToCartInput!): Carts!
  removeItemFromCart(cartItemId: ID!): String!
  clearCart(cartId: ID!): String!

  createOrder(input: CreateOrderInput!): Orders!
  updateOrderStatus(orderId: ID!, input: UpdateOrderStatusInput!): Orders!
  cancelOrder(orderId: ID!): String!

  modifyProductLike(input: ModifyLikeInput!): Likes!

  markNotificationAsRead(notificationId: ID!): Notifications!
  deleteNotification(notificationId: ID!): DeletionResult!
}
